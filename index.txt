import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
class Result {
    public static int numberOfWays(List<List<Integer>> roads) {
    int graph[][] = new int [51][51];
    int n = 0;
    for (int i=0;i<roads.size();i++) {
        int x = roads.get(i).get(0);
        int y = roads.get(i).get(1);
        n = Math.max(n,x);
        n = Math.max(n,y);
        graph[y][x] = 1;
        graph[x][y] = 1;
    }
    int dist[][] = new int[51][51];
    for(int i=0;i<51;i++) {
        for(int j=0;j<51;j++) {
            if(graph[i][j] == 0)
            graph[i][j] = 10000;
        }
    }
    floydWarshall(graph, dist, n);
    int res = 0;
    for(int i=1;i<=n;i++) {
        for(int j=i+1;j<=n;j++) {
            System.out.print(dist[i][j] + " ");
            for(int k=j+1;k<=n;k++) {
                if(dist[i][j] == dist[i][k] && dist[i][j] == dist[j][k] && dist[i][j] != Integer.MAX_VALUE) {
                    res++;
                }
            }
        }
        System.out.println(" ");
    }
    return res;
    }
    static void floydWarshall(int graph[][], int dist[][], int n)
    {
        int i, j, k;
        for (i = 0; i <= n; i++)
            for (j = 0; j <= n; j++)
                dist[i][j] = graph[i][j];
        for (k = 0; k <= n; k++)
        {
            for (i = 0; i <= n; i++)
            {
                for (j = 0; j <= n; j++)
                {
                    if (dist[i][k] + dist[k][j] < dist[i][j])
                        dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
}